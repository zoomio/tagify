name: Release

on:
  push:
    tags:
    - 'v*'

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Set tag to env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install
      run: go get -t -v ./...

    - name: Build Linux
      run: ./_bin/build.sh linux ${RELEASE_VERSION}
      shell: bash

    - name: Build MacOS
      run: ./_bin/build.sh darwin ${RELEASE_VERSION}
      shell: bash

    - name: Build Windows
      run: ./_bin/build.sh windows ${RELEASE_VERSION}
      shell: bash

    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: _dist/coverage.out

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${RELEASE_VERSION}
    #     release_name: Release ${RELEASE_VERSION}
    #     draft: false
    #     prerelease: false

    - name: Upload release notes
      id: create_release
      uses: Roang-zero1/github-create-release-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        created_tag: ${RELEASE_VERSION}
        changelog_file: CHANGELOG.md

    - name: Upload Linux Release
      id: upload-linux-release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: _dist/tagify_linux_${RELEASE_VERSION}
        asset_name: tagify_linux_${RELEASE_VERSION}
        asset_content_type: application/octet-stream

    - name: Upload Darwin Release
      id: upload-darwin-release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: _dist/tagify_darwin_${RELEASE_VERSION}
        asset_name: tagify_darwin_${RELEASE_VERSION}
        asset_content_type: application/octet-stream

    - name: Upload Windows Release
      id: upload-windows-release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: _dist/tagify_windows_${RELEASE_VERSION}
        asset_name: tagify_windows_${RELEASE_VERSION}
        asset_content_type: application/octet-stream
